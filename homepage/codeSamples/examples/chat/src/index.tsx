export function App_tsx() {
	return <div className="shiki-outer"><div className="shiki-filename">app.tsx</div><div className="not-prose" dangerouslySetInnerHTML={{__html: `<pre class="shiki css-variables twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) const Co: {&#10;    map: &lt;Fields extends CoMapFields, IndexSig extends IndexSignature>(fields: Fields, indexSignature?: IndexSig | undefined) => CoMapSchema&lt;CoMapOfFields, Fields, IndexSig> &amp; {&#10;        ...;&#10;    };&#10;    ... 5 more ...;&#10;    media: {&#10;        ...;&#10;    };&#10;}&#10;import Co' >Co</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='import S' >S</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) type ID&lt;T> = \`co_z\${string}\` &amp; {&#10;    readonly __type: (_: never) => T;&#10;}&#10;import ID' >ID</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) class Group&#10;import Group' >Group</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"jazz-js"</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) function DemoAuth({ appName, appHostname, Component, }: {&#10;    appName: string;&#10;    appHostname?: string;&#10;    Component?: DemoAuthComponent;&#10;}): ReactAuthHook&#10;import DemoAuth' >DemoAuth</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) function JazzReact&lt;AccountS extends AccountSchema&lt;any, ProfileSchema, RootSchema>>({ accountSchema, migration, }: {&#10;    accountSchema?: AccountS;&#10;    migration?: AccountMigration&lt;AccountS>;&#10;    apiKey?: string;&#10;}): {&#10;    Provider: ({ auth: authHook, syncAddress, children, }: {&#10;        auth: ReactAuthHook;&#10;        syncAddress?: string | undefined;&#10;        children: React.ReactNode;&#10;    }) => React.JSX.Element;&#10;    useAccount: () => {&#10;        ...;&#10;    };&#10;    useCoState: &lt;V extends CoValueSchema&lt;...>>(Schema: V, id: ID&lt;...> | undefined) => S.Schema&lt;in out A, in out I = A, out R = never>.To&lt;...> | undefined;&#10;    useAcceptInvite: &lt;V extends CoValueSchema&lt;...>>({ invitedObjectSchema, onAccept, forValueHint, }: {&#10;        ...;&#10;    }) => void;&#10;}&#10;import JazzReact' >JazzReact</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"jazz-react"</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) function createRoot(container: Element | DocumentFragment, options?: RootOptions): Root&#10;import createRoot' >createRoot</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"react-dom/client"</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) function useHash(options?: {&#10;    tellParentFrame?: boolean;&#10;}): {&#10;    navigate: (url: string) => void;&#10;    route: &lt;P extends string = "">(route: string, paramUser: (param: P) => ReactNode) => ReactNode;&#10;}&#10;import useHash' >useHash</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"hash-slash"</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) function ChatScreen(props: {&#10;    chatID: ID&lt;Chat>;&#10;}): React.JSX.Element&#10;import ChatScreen' >ChatScreen</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"./chatScreen.tsx"</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='class Message' >Message</data-lsp></span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(alias) const Co: {&#10;    map: &lt;Fields extends CoMapFields, IndexSig extends IndexSignature>(fields: Fields, indexSignature?: IndexSig | undefined) => CoMapSchema&lt;CoMapOfFields, Fields, IndexSig> &amp; {&#10;        ...;&#10;    };&#10;    ... 5 more ...;&#10;    media: {&#10;        ...;&#10;    };&#10;}&#10;import Co' >Co</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(property) map: &lt;{&#10;    text: S.Schema&lt;string, string, never>;&#10;}, IndexSignature>(fields: {&#10;    text: S.Schema&lt;string, string, never>;&#10;}, indexSignature?: IndexSignature | undefined) => CoMapSchema&lt;...> &amp; {&#10;    ...;&#10;}' >map</data-lsp></span><span style="color: var(--shiki-color-text)">({ <data-lsp lsp='(property) text: S.Schema&lt;string, string, never>' >text</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='import S' >S</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='const string: S.Schema&lt;string, string, never>' >string</data-lsp> })</span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) as&lt;Message>(): CoMapSchema&lt;Message, {&#10;    text: S.Schema&lt;string, string, never>;&#10;}, IndexSignature>' >as</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='class Message' >Message</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;() {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='class Chat' >Chat</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(alias) const Co: {&#10;    map: &lt;Fields extends CoMapFields, IndexSig extends IndexSignature>(fields: Fields, indexSignature?: IndexSig | undefined) => CoMapSchema&lt;CoMapOfFields, Fields, IndexSig> &amp; {&#10;        ...;&#10;    };&#10;    ... 5 more ...;&#10;    media: {&#10;        ...;&#10;    };&#10;}&#10;import Co' >Co</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(property) list: &lt;typeof Message>(itemSchema: typeof Message) => CoListSchema&lt;CoListOf&lt;typeof Message>.CoListOfItem, typeof Message> &amp; {&#10;    as&lt;SubClass>(): CoListSchema&lt;...>;&#10;}' >list</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='class Message' >Message</data-lsp>)</span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) as&lt;Chat>(): CoListSchema&lt;Chat, typeof Message>' >as</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='class Chat' >Chat</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;() {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const Jazz: {&#10;    Provider: ({ auth: authHook, syncAddress, children, }: {&#10;        auth: ReactAuthHook;&#10;        syncAddress?: string | undefined;&#10;        children: React.ReactNode;&#10;    }) => React.JSX.Element;&#10;    useAccount: () => {&#10;        me: ControlledAccount&lt;ProfileSchema, RootSchema>;&#10;        logOut: () => void;&#10;    };&#10;    useCoState: &lt;V extends CoValueSchema&lt;...>>(Schema: V, id: ID&lt;...> | undefined) => S.Schema.To&lt;...> | undefined;&#10;    useAcceptInvite: &lt;V extends CoValueSchema&lt;...>>({ invitedObjectSchema, onAccept, forValueHint, }: {&#10;        ...;&#10;    }) => void;&#10;}' >Jazz</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) JazzReact&lt;AccountSchema&lt;any, ProfileSchema, RootSchema>>({ accountSchema, migration, }: {&#10;    accountSchema?: AccountSchema&lt;any, ProfileSchema, RootSchema> | undefined;&#10;    migration?: AccountMigration&lt;...> | undefined;&#10;    apiKey?: string | undefined;&#10;}): {&#10;    ...;&#10;}&#10;import JazzReact' >JazzReact</data-lsp></span><span style="color: var(--shiki-color-text)">({ <data-lsp lsp='(property) apiKey?: string | undefined' >apiKey</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='' style='border-bottom: solid 2px lightgrey;'>meta</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) ImportMeta.env: ImportMetaEnv' >env</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(index) ImportMetaEnv[string]: any' >VITE_JAZZ_KEY</data-lsp></span><span style="color: var(--shiki-color-text)"> });</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const useAccount: () => {&#10;    me: ControlledAccount&lt;ProfileSchema, RootSchema>;&#10;    logOut: () => void;&#10;}' >useAccount</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const useCoState: &lt;V extends CoValueSchema&lt;any, CoValue&lt;string, any>, string, any>>(Schema: V, id: ID&lt;S.Schema.To&lt;V>> | undefined) => S.Schema.To&lt;V> | undefined' >useCoState</data-lsp></span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='const Jazz: {&#10;    Provider: ({ auth: authHook, syncAddress, children, }: {&#10;        auth: ReactAuthHook;&#10;        syncAddress?: string | undefined;&#10;        children: React.ReactNode;&#10;    }) => React.JSX.Element;&#10;    useAccount: () => {&#10;        me: ControlledAccount&lt;ProfileSchema, RootSchema>;&#10;        logOut: () => void;&#10;    };&#10;    useCoState: &lt;V extends CoValueSchema&lt;...>>(Schema: V, id: ID&lt;...> | undefined) => S.Schema.To&lt;...> | undefined;&#10;    useAcceptInvite: &lt;V extends CoValueSchema&lt;...>>({ invitedObjectSchema, onAccept, forValueHint, }: {&#10;        ...;&#10;    }) => void;&#10;}' >Jazz</data-lsp>;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) createRoot(container: Element | DocumentFragment, options?: RootOptions | undefined): Root&#10;import createRoot' >createRoot</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.getElementById(elementId: string): HTMLElement | null' >getElementById</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">"root"</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Root.render(children: React.ReactNode): void' >render</data-lsp></span><span style="color: var(--shiki-color-text)">(</span></div><div class='line'><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const Jazz: {&#10;    Provider: ({ auth: authHook, syncAddress, children, }: {&#10;        auth: ReactAuthHook;&#10;        syncAddress?: string | undefined;&#10;        children: React.ReactNode;&#10;    }) => React.JSX.Element;&#10;    useAccount: () => {&#10;        me: ControlledAccount&lt;ProfileSchema, RootSchema>;&#10;        logOut: () => void;&#10;    };&#10;    useCoState: &lt;V extends CoValueSchema&lt;...>>(Schema: V, id: ID&lt;...> | undefined) => S.Schema.To&lt;...> | undefined;&#10;    useAcceptInvite: &lt;V extends CoValueSchema&lt;...>>({ invitedObjectSchema, onAccept, forValueHint, }: {&#10;        ...;&#10;    }) => void;&#10;}' >Jazz</data-lsp>.<data-lsp lsp='(property) Provider: ({ auth: authHook, syncAddress, children, }: {&#10;    auth: ReactAuthHook;&#10;    syncAddress?: string | undefined;&#10;    children: React.ReactNode;&#10;}) => React.JSX.Element' >Provider</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) auth: ReactAuthHook' >auth</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) DemoAuth({ appName, appHostname, Component, }: {&#10;    appName: string;&#10;    appHostname?: string | undefined;&#10;    Component?: DemoAuthComponent | undefined;&#10;}): ReactAuthHook&#10;import DemoAuth' >DemoAuth</data-lsp></span><span style="color: var(--shiki-color-text)">({ <data-lsp lsp='(property) appName: string' >appName</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"Jazz Chat"</span><span style="color: var(--shiki-color-text)"> })}&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='function App(): React.JSX.Element' >App</data-lsp></span><span style="color: var(--shiki-color-text)"> /&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const Jazz: {&#10;    Provider: ({ auth: authHook, syncAddress, children, }: {&#10;        auth: ReactAuthHook;&#10;        syncAddress?: string | undefined;&#10;        children: React.ReactNode;&#10;    }) => React.JSX.Element;&#10;    useAccount: () => {&#10;        me: ControlledAccount&lt;ProfileSchema, RootSchema>;&#10;        logOut: () => void;&#10;    };&#10;    useCoState: &lt;V extends CoValueSchema&lt;...>>(Schema: V, id: ID&lt;...> | undefined) => S.Schema.To&lt;...> | undefined;&#10;    useAcceptInvite: &lt;V extends CoValueSchema&lt;...>>({ invitedObjectSchema, onAccept, forValueHint, }: {&#10;        ...;&#10;    }) => void;&#10;}' >Jazz</data-lsp>.<data-lsp lsp='(property) Provider: ({ auth: authHook, syncAddress, children, }: {&#10;    auth: ReactAuthHook;&#10;    syncAddress?: string | undefined;&#10;    children: React.ReactNode;&#10;}) => React.JSX.Element' >Provider</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function App(): React.JSX.Element' >App</data-lsp></span><span style="color: var(--shiki-color-text)">() {</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const route: &lt;P extends string = "">(route: string, paramUser: (param: P) => React.ReactNode) => React.ReactNode' >route</data-lsp></span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) useHash(options?: {&#10;    tellParentFrame?: boolean | undefined;&#10;} | undefined): {&#10;    navigate: (url: string) => void;&#10;    route: &lt;P extends string = "">(route: string, paramUser: (param: P) => React.ReactNode) => React.ReactNode;&#10;}&#10;import useHash' >useHash</data-lsp></span><span style="color: var(--shiki-color-text)">({ <data-lsp lsp='(property) tellParentFrame?: boolean | undefined' >tellParentFrame</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> });</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">"flex flex-col items-center justify-between w-screen h-screen p-2 dark:bg-black dark:text-white"</span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps&lt;React.ButtonHTMLAttributes&lt;HTMLButtonElement>, HTMLButtonElement>' >button</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.DOMAttributes&lt;HTMLButtonElement>.onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='const useAccount: () => {&#10;    me: ControlledAccount&lt;ProfileSchema, RootSchema>;&#10;    logOut: () => void;&#10;}' >useAccount</data-lsp></span><span style="color: var(--shiki-color-text)">().<data-lsp lsp='(property) logOut: () => void' >logOut</data-lsp>} </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;T>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">"rounded mb-5 px-2 py-1 bg-stone-200 dark:bg-stone-800 dark:text-white self-end"</span><span style="color: var(--shiki-color-text)">&gt;Log Out&lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps&lt;React.ButtonHTMLAttributes&lt;HTMLButtonElement>, HTMLButtonElement>' >button</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    {</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='const route: &lt;"">(route: string, paramUser: (param: "") => React.ReactNode) => React.ReactNode' >route</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;/&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='function StartScreen(): React.JSX.Element' >StartScreen</data-lsp></span><span style="color: var(--shiki-color-text)"> /&gt;)}</span></div><div class='line'><span style="color: var(--shiki-color-text)">    {</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='const route: &lt;"">(route: string, paramUser: (param: "") => React.ReactNode) => React.ReactNode' >route</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;/chat/:id&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) id: ""' >id</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(alias) function ChatScreen(props: {&#10;    chatID: ID&lt;Chat>;&#10;}): React.JSX.Element&#10;import ChatScreen' >ChatScreen</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) chatID: ID&lt;Chat>' >chatID</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{<data-lsp lsp='(parameter) id: ""' >id</data-lsp> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) type ID&lt;T> = \`co_z\${string}\` &amp; {&#10;    readonly __type: (_: never) => T;&#10;}&#10;import ID' >ID</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='class Chat' >Chat</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;} /&gt;)}</span></div><div class='line'><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function StartScreen(): React.JSX.Element' >StartScreen</data-lsp></span><span style="color: var(--shiki-color-text)">() {</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const me: ControlledAccount&lt;ProfileSchema, RootSchema>' >me</data-lsp></span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='const useAccount: () => {&#10;    me: ControlledAccount&lt;ProfileSchema, RootSchema>;&#10;    logOut: () => void;&#10;}' >useAccount</data-lsp></span><span style="color: var(--shiki-color-text)">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='const createChat: () => void' >createChat</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const group: Group' >group</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) new Group(options: {&#10;    owner: AnyAccount&lt;ProfileSchema, RootSchema> | AnyGroup&lt;S.Schema&lt;null, null, never>, S.Schema&lt;null, null, never>>;&#10;}): Group (+1 overload)&#10;import Group' >Group</data-lsp></span><span style="color: var(--shiki-color-text)">({ <data-lsp lsp='(property) owner: AnyAccount&lt;ProfileSchema, RootSchema> | AnyGroup&lt;S.Schema&lt;null, null, never>, S.Schema&lt;null, null, never>>' >owner</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='const me: ControlledAccount&lt;ProfileSchema, RootSchema>' >me</data-lsp> });</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const group: Group' >group</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) AnyGroup&lt;Schema&lt;null, null, never>, Schema&lt;null, null, never>>.addMember(member: AnyAccount&lt;ProfileSchema, RootSchema> | "everyone", role: Role): Group' >addMember</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">"everyone"</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"writer"</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const chat: Chat' >chat</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='constructor Chat(init: (Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: S.Schema&lt;string, string, never>;&#10;}, IndexSignature>)[], options: {&#10;    owner: AnyAccount&lt;...> | AnyGroup&lt;...>;&#10;}): Chat' >Chat</data-lsp></span><span style="color: var(--shiki-color-text)">([]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(property) owner: AnyAccount&lt;ProfileSchema, RootSchema> | AnyGroup&lt;S.Schema&lt;null, null, never>, S.Schema&lt;null, null, never>>' >owner</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='const group: Group' >group</data-lsp> });</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var location: Location' >location</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Location.hash: string' >hash</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"/chat/"</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const chat: Chat' >chat</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) CoValue&lt;"CoList", RawCoList&lt;JsonValue, JsonObject | null>>.id: ID&lt;Chat>' >id</data-lsp>;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  };</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps&lt;React.ButtonHTMLAttributes&lt;HTMLButtonElement>, HTMLButtonElement>' >button</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.DOMAttributes&lt;HTMLButtonElement>.onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{<data-lsp lsp='const createChat: () => void' >createChat</data-lsp>} </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;T>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">"rounded py-2 px-4 bg-stone-200 dark:bg-stone-800 dark:text-white my-auto"</span><span style="color: var(--shiki-color-text)">&gt;Create New Chat&lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps&lt;React.ButtonHTMLAttributes&lt;HTMLButtonElement>, HTMLButtonElement>' >button</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">}</span></div></code></div></pre>`
	}}/></div>;
}

export function ChatScreen_tsx() {
	return <div className="shiki-outer"><div className="shiki-filename">chatScreen.tsx</div><div className="not-prose" dangerouslySetInnerHTML={{__html: `<pre class="shiki css-variables twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) type ID&lt;T> = \`co_z\${string}\` &amp; {&#10;    readonly __type: (_: never) => T;&#10;}&#10;import ID' >ID</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) class Account&#10;import Account' >Account</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;jazz-js&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) class Chat&#10;import Chat' >Chat</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) class Message&#10;import Message' >Message</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) const useCoState: &lt;V extends CoValueSchema&lt;any, CoValue&lt;string, any>, string, any>>(Schema: V, id: ID&lt;S.Schema.To&lt;V>> | undefined) => S.Schema.To&lt;V> | undefined&#10;import useCoState' >useCoState</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;./app.tsx&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function ChatScreen(props: {&#10;    chatID: ID&lt;Chat>;&#10;}): React.JSX.Element' >ChatScreen</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) props: {&#10;    chatID: ID&lt;Chat>;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(property) chatID: ID&lt;Chat>' >chatID</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) type ID&lt;T> = \`co_z\${string}\` &amp; {&#10;    readonly __type: (_: never) => T;&#10;}&#10;import ID' >ID</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) class Chat&#10;import Chat' >Chat</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; }) {</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const chat: (Chat &amp; ((Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: Schema&lt;string, string, never>;&#10;}, IndexSignature>) | undefined)[] &amp; CoListBase&lt;...>) | undefined' >chat</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) useCoState&lt;typeof Chat>(Schema: typeof Chat, id: ID&lt;Chat &amp; ((Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: Schema&lt;string, string, never>;&#10;}, IndexSignature>) | undefined)[] &amp; CoListBase&lt;...>> | undefined): (Chat &amp; ... 1 more ... &amp; CoListBase&lt;...>) | undefined&#10;import useCoState' >useCoState</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(alias) class Chat&#10;import Chat' >Chat</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) props: {&#10;    chatID: ID&lt;Chat>;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) chatID: ID&lt;Chat>' >chatID</data-lsp>);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='const chat: (Chat &amp; ((Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: Schema&lt;string, string, never>;&#10;}, IndexSignature>) | undefined)[] &amp; CoListBase&lt;...>) | undefined' >chat</data-lsp> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&apos;w-full max-w-xl h-full flex flex-col items-stretch&apos;</span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    {</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const chat: Chat &amp; ((Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: Schema&lt;string, string, never>;&#10;}, IndexSignature>) | undefined)[] &amp; CoListBase&lt;...>' >chat</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Array&lt;(Message &amp; { text: string; } &amp; { [x: string]: never; } &amp; CoMapBase&lt;{ text: Schema&lt;string, string, never>; }, IndexSignature>) | undefined>.map&lt;React.JSX.Element | undefined>(callbackfn: (value: (Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: Schema&lt;string, string, never>;&#10;}, IndexSignature>) | undefined, index: number, array: ((Message &amp; ... 2 more ... &amp; CoMapBase&lt;...>) | undefined)[]) => React.JSX.Element | undefined, thisArg?: any): (React.JSX.Element | undefined)[]' >map</data-lsp></span><span style="color: var(--shiki-color-text)">((<data-lsp lsp='(parameter) msg: (Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: Schema&lt;string, string, never>;&#10;}, IndexSignature>) | undefined' >msg</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) msg: (Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: Schema&lt;string, string, never>;&#10;}, IndexSignature>) | undefined' >msg</data-lsp> </span><span style="color: var(--shiki-token-keyword)">&&</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='function ChatBubble(props: {&#10;    msg: Message;&#10;}): React.JSX.Element' >ChatBubble</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) msg: Message' >msg</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{<data-lsp lsp='(parameter) msg: Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: Schema&lt;string, string, never>;&#10;}, IndexSignature>' >msg</data-lsp>} </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.Attributes.key?: React.Key | null | undefined' >key</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) msg: Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: Schema&lt;string, string, never>;&#10;}, IndexSignature>' >msg</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) CoValue&lt;"CoMap", RawCoMap&lt;{ [key: string]: JsonValue | undefined; }, JsonObject | null>>.id: ID&lt;Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: Schema&lt;string, string, never>;&#10;}, IndexSignature>>' >id</data-lsp>} />)}</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='function ChatInput(props: {&#10;    onSubmit: (text: string) => void;&#10;}): React.JSX.Element' >ChatInput</data-lsp></span></div><div class='line'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) onSubmit: (text: string) => void' >onSubmit</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{(<data-lsp lsp='(parameter) text: string' >text</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></div><div class='line'><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const chat: Chat &amp; ((Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: Schema&lt;string, string, never>;&#10;}, IndexSignature>) | undefined)[] &amp; CoListBase&lt;...>' >chat</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Array&lt;(Message &amp; { text: string; } &amp; { [x: string]: never; } &amp; CoMapBase&lt;{ text: Schema&lt;string, string, never>; }, IndexSignature>) | undefined>.push(...items: ((Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: Schema&lt;string, string, never>;&#10;}, IndexSignature>) | undefined)[]): number' >push</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) new Message(init: {&#10;    [x: string]: any;&#10;    readonly text: string;&#10;}, options: {&#10;    owner: AnyAccount&lt;ProfileSchema, RootSchema> | AnyGroup&lt;Schema&lt;null, null, never>, Schema&lt;...>>;&#10;}): Message&#10;import Message' >Message</data-lsp></span><span style="color: var(--shiki-color-text)">({ <data-lsp lsp='(property) text: string' >text</data-lsp> }</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(property) owner: AnyAccount&lt;ProfileSchema, RootSchema> | AnyGroup&lt;Schema&lt;null, null, never>, Schema&lt;null, null, never>>' >owner</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const chat: Chat &amp; ((Message &amp; {&#10;    text: string;&#10;} &amp; {&#10;    [x: string]: never;&#10;} &amp; CoMapBase&lt;{&#10;    text: Schema&lt;string, string, never>;&#10;}, IndexSignature>) | undefined)[] &amp; CoListBase&lt;...>' >chat</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) CoValue&lt;Type extends string = string, Raw = any>._owner: AnyAccount&lt;ProfileSchema, RootSchema> | AnyGroup&lt;Schema&lt;null, null, never>, Schema&lt;null, null, never>>' >_owner</data-lsp> }));</span></div><div class='line'><span style="color: var(--shiki-color-text)">      }}</span></div><div class='line'><span style="color: var(--shiki-color-text)">    /&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;Loading...&lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function ChatBubble(props: {&#10;    msg: Message;&#10;}): React.JSX.Element' >ChatBubble</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) props: {&#10;    msg: Message;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(property) msg: Message' >msg</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) class Message&#10;import Message' >Message</data-lsp></span><span style="color: var(--shiki-color-text)"> }) {</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const lastEdit: {&#10;    value?: string | undefined;&#10;    ref?: undefined;&#10;    by?: AnyAccount&lt;ProfileSchema, RootSchema> | undefined;&#10;    madeAt: Date;&#10;    tx: TransactionID;&#10;}' >lastEdit</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) props: {&#10;    msg: Message;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) msg: Message' >msg</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) CoMapBase&lt;{ text: Schema&lt;string, string, never>; }, IndexSignature>._edits: {&#10;    text: {&#10;        value?: string | undefined;&#10;        ref?: undefined;&#10;        by?: AnyAccount&lt;ProfileSchema, RootSchema> | undefined;&#10;        madeAt: Date;&#10;        tx: TransactionID;&#10;    };&#10;} &amp; {&#10;    ...;&#10;}' >_edits</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) text: {&#10;    value?: string | undefined;&#10;    ref?: undefined;&#10;    by?: AnyAccount&lt;ProfileSchema, RootSchema> | undefined;&#10;    madeAt: Date;&#10;    tx: TransactionID;&#10;}' >text</data-lsp>;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const align: "items-end" | "items-start"' >align</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const lastEdit: {&#10;    value?: string | undefined;&#10;    ref?: undefined;&#10;    by?: AnyAccount&lt;ProfileSchema, RootSchema> | undefined;&#10;    madeAt: Date;&#10;    tx: TransactionID;&#10;}' >lastEdit</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) by?: AnyAccount&lt;ProfileSchema, RootSchema> | undefined' >by</data-lsp></span><span style="color: var(--shiki-color-text)">?.<data-lsp lsp='(property) AnyAccount&lt;ProfileSchema, RootSchema>.isMe: boolean | undefined' >isMe</data-lsp> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;items-end&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;items-start&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-string-expression)">\`</span><span style="color: var(--shiki-token-keyword)">\${</span><span style="color: var(--shiki-color-text)"><data-lsp lsp='const align: "items-end" | "items-start"' >align</data-lsp></span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)"> flex flex-col\`</span><span style="color: var(--shiki-color-text)">}&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&apos;rounded-xl bg-stone-100 dark:bg-stone-700 dark:text-white py-2 px-4 mt-2 min-w-[5rem]&apos;</span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">      { </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) props: {&#10;    msg: Message;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) msg: Message' >msg</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) text: string' >text</data-lsp> }</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&apos;text-xs text-neutral-500 ml-2&apos;</span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">      { </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const lastEdit: {&#10;    value?: string | undefined;&#10;    ref?: undefined;&#10;    by?: AnyAccount&lt;ProfileSchema, RootSchema> | undefined;&#10;    madeAt: Date;&#10;    tx: TransactionID;&#10;}' >lastEdit</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) by?: AnyAccount&lt;ProfileSchema, RootSchema> | undefined' >by</data-lsp></span><span style="color: var(--shiki-color-text)">?.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) AnyAccount&lt;ProfileSchema, RootSchema>.profile?: CoMap&lt;{&#10;    name: Schema&lt;string, string, never>;&#10;}> | undefined' >profile</data-lsp></span><span style="color: var(--shiki-color-text)">?.<data-lsp lsp='(property) name: string | undefined' >name</data-lsp> }{</span><span style="color: var(--shiki-token-string-expression)">&apos; &apos;</span><span style="color: var(--shiki-color-text)">}</span></div><div class='line'><span style="color: var(--shiki-color-text)">      { </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const lastEdit: {&#10;    value?: string | undefined;&#10;    ref?: undefined;&#10;    by?: AnyAccount&lt;ProfileSchema, RootSchema> | undefined;&#10;    madeAt: Date;&#10;    tx: TransactionID;&#10;}' >lastEdit</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) madeAt: Date' >madeAt</data-lsp></span><span style="color: var(--shiki-token-function)">?.<data-lsp lsp='(method) Date.toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string (+2 overloads)' >toLocaleTimeString</data-lsp></span><span style="color: var(--shiki-color-text)">() }</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function ChatInput(props: {&#10;    onSubmit: (text: string) => void;&#10;}): React.JSX.Element' >ChatInput</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) props: {&#10;    onSubmit: (text: string) => void;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) onSubmit: (text: string) => void' >onSubmit</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) text: string' >text</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)"> }) {</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.input: React.DetailedHTMLProps&lt;React.InputHTMLAttributes&lt;HTMLInputElement>, HTMLInputElement>' >input</data-lsp></span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.InputHTMLAttributes&lt;HTMLInputElement>.placeholder?: string | undefined' >placeholder</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&apos;Type a message and press Enter&apos;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;T>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&apos;rounded p-2 border mt-auto dark:bg-black dark:text-white dark:border-stone-700&apos;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.DOMAttributes&lt;HTMLInputElement>.onKeyDown?: React.KeyboardEventHandler&lt;HTMLInputElement> | undefined' >onKeyDown</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{({ <data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(property) React.BaseSyntheticEvent&lt;KeyboardEvent, EventTarget &amp; HTMLInputElement, EventTarget>.currentTarget: EventTarget &amp; HTMLInputElement' >currentTarget</data-lsp>: <data-lsp lsp='(parameter) input: EventTarget &amp; HTMLInputElement' >input</data-lsp> }) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></div><div class='line'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) key: string' >key</data-lsp> </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Enter&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) input: EventTarget &amp; HTMLInputElement' >input</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) HTMLInputElement.value: string' >value</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">return</span></div><div class='line'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) props: {&#10;    onSubmit: (text: string) => void;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(property) onSubmit: (text: string) => void' >onSubmit</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) input: EventTarget &amp; HTMLInputElement' >input</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) HTMLInputElement.value: string' >value</data-lsp>);</span></div><div class='line'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) input: EventTarget &amp; HTMLInputElement' >input</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) HTMLInputElement.value: string' >value</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    }}</span></div><div class='line'><span style="color: var(--shiki-color-text)">  /&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">}</span></div></code></div></pre>`
	}}/></div>;
}