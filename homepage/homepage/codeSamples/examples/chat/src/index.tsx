export function App_tsx() {
	return <div className="shiki-outer"><div className="shiki-filename">app.tsx</div><div className="not-prose" dangerouslySetInnerHTML={{__html: `<pre class="shiki css-variables twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) class CoMap&#10;import CoMap' >CoMap</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) class CoList&lt;Item = any>&#10;import CoList' >CoList</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) type co&lt;T> = T | (T &amp; CoMarker)&#10;(alias) const co: {&#10;    string: co&lt;string>;&#10;    number: co&lt;number>;&#10;    boolean: co&lt;boolean>;&#10;    null: null;&#10;    literal&lt;T extends (string | number | boolean)[]>(..._lit: T): co&lt;T[number]>;&#10;    json&lt;T extends JsonValue>(): co&lt;...>;&#10;    encoded&lt;T>(arg: Encoder&lt;...>): co&lt;...>;&#10;    ref: {&#10;        ...;&#10;    };&#10;    items: typeof ItemsSym;&#10;    members: typeof MembersSym;&#10;}&#10;import co' >co</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) class Group&#10;import Group' >Group</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) type ID&lt;T> = \`co_z\${string}\` &amp; IDMarker&lt;T>&#10;import ID' >ID</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"jazz-tools"</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) function createJazzReactContext&lt;Acc extends Account>({ auth: authHook, peer, storage, }: {&#10;    auth: ReactAuthHook&lt;Acc>;&#10;    peer: \`wss://\${string}\` | \`ws://\${string}\`;&#10;    storage?: "indexedDB" | "experimentalOPFSdoNotUseOrYouWillBeFired";&#10;}): JazzReactContext&lt;Acc>&#10;import createJazzReactContext' >createJazzReactContext</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) function DemoAuth&lt;Acc extends Account = Account>({ accountSchema, appName, appHostname, Component, }: {&#10;    accountSchema?: CoValueClass&lt;Acc> &amp; typeof Account;&#10;    appName: string;&#10;    appHostname?: string;&#10;    Component?: DemoAuth.Component;&#10;}): ReactAuthHook&lt;Acc>&#10;(alias) namespace DemoAuth&#10;import DemoAuth' >DemoAuth</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"jazz-react"</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) function createRoot(container: Container, options?: RootOptions): Root&#10;import createRoot' >createRoot</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"react-dom/client"</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) function useIframeHashRouter(): {&#10;    navigate: (url: string) => void;&#10;    route: (routes: {&#10;        [route: string]: (param: string) => ReactNode;&#10;    }) => ReactNode;&#10;}&#10;import useIframeHashRouter' >useIframeHashRouter</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"hash-slash"</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) function ChatScreen(props: {&#10;    chatID: ID&lt;Chat>;&#10;}): React.JSX.Element&#10;import ChatScreen' >ChatScreen</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"./chatScreen.tsx"</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='class Message' >Message</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) class CoMap&#10;import CoMap' >CoMap</data-lsp></span><span style="color: var(--shiki-color-text)"> {</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) Message.text: co&lt;string>' >text</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(alias) const co: {&#10;    string: co&lt;string>;&#10;    number: co&lt;number>;&#10;    boolean: co&lt;boolean>;&#10;    null: null;&#10;    literal&lt;T extends (string | number | boolean)[]>(..._lit: T): co&lt;T[number]>;&#10;    json&lt;T extends JsonValue>(): co&lt;...>;&#10;    encoded&lt;T>(arg: Encoder&lt;...>): co&lt;...>;&#10;    ref: {&#10;        ...;&#10;    };&#10;    items: typeof ItemsSym;&#10;    members: typeof MembersSym;&#10;}&#10;import co' >co</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) string: co&lt;string>' >string</data-lsp>;</span></div><div class='line'><span style="color: var(--shiki-color-text)">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='class Chat' >Chat</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(alias) class CoList&lt;Item = any>&#10;import CoList' >CoList</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) CoList&lt;Item = any>.Of&lt;co&lt;Message | null>>(item: co&lt;Message | null>): {&#10;    new (options: {&#10;        fromRaw: RawCoList&lt;JsonValue, JsonObject | null>;&#10;    } | {&#10;        ...;&#10;    }): CoList&lt;...>;&#10;    ... 13 more ...;&#10;    from&lt;T>(arrayLike: ArrayLike&lt;...>): T[];&#10;    from&lt;T, U>(arrayLike: ArrayLike&lt;...>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];&#10;    from&lt;T>(iterable: Iterable&lt;...> | ArrayLike&lt;...>): T[];&#10;    from&lt;T, U>(iterable: Iterable&lt;...> | ArrayLike&lt;...>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];&#10;}' >Of</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(alias) const co: {&#10;    string: co&lt;string>;&#10;    number: co&lt;number>;&#10;    boolean: co&lt;boolean>;&#10;    null: null;&#10;    literal&lt;T extends (string | number | boolean)[]>(..._lit: T): co&lt;T[number]>;&#10;    json&lt;T extends JsonValue>(): co&lt;...>;&#10;    encoded&lt;T>(arg: Encoder&lt;...>): co&lt;...>;&#10;    ref: {&#10;        ...;&#10;    };&#10;    items: typeof ItemsSym;&#10;    members: typeof MembersSym;&#10;}&#10;import co' >co</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(property) ref: &lt;typeof Message>(arg: typeof Message | ((_raw: RawCoMap&lt;{&#10;    [key: string]: JsonValue | undefined;&#10;}, JsonObject | null>) => typeof Message)) => co&lt;...> (+1 overload)' >ref</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='class Message' >Message</data-lsp>)) {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const Jazz: JazzReactContext&lt;Account>' >Jazz</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) createJazzReactContext&lt;Account>({ auth: authHook, peer, storage, }: {&#10;    auth: ReactAuthHook&lt;Account>;&#10;    peer: \`wss://\${string}\` | \`ws://\${string}\`;&#10;    storage?: "indexedDB" | "experimentalOPFSdoNotUseOrYouWillBeFired" | undefined;&#10;}): JazzReactContext&lt;...>&#10;import createJazzReactContext' >createJazzReactContext</data-lsp></span><span style="color: var(--shiki-color-text)">({</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) auth: ReactAuthHook&lt;Account>' >auth</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) DemoAuth&lt;Account>({ accountSchema, appName, appHostname, Component, }: {&#10;    accountSchema?: (CoValueClass&lt;Account, any> &amp; typeof Account) | undefined;&#10;    appName: string;&#10;    appHostname?: string | undefined;&#10;    Component?: DemoAuth.Component | undefined;&#10;}): ReactAuthHook&lt;...>&#10;import DemoAuth' >DemoAuth</data-lsp></span><span style="color: var(--shiki-color-text)">({ <data-lsp lsp='(property) appName: string' >appName</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"Jazz Chat"</span><span style="color: var(--shiki-color-text)"> })</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) peer: \`wss://\${string}\` | \`ws://\${string}\`' >peer</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">\`wss://mesh.jazz.tools/?key=you@example.com\`</span></div><div class='line'><span style="color: var(--shiki-color-text)">});</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const useAccount: {&#10;    (): {&#10;        me: Account;&#10;        logOut: () => void;&#10;    };&#10;    &lt;D extends DepthsIn&lt;Account>>(depth: D): {&#10;        me: (D extends never[] ? Account : D extends (infer ItemDepth)[] ? never : keyof D extends never ? Account : { [Key in keyof D]-?: Key extends "isMe" | ... 5 more ... | "migrate" ? UnCo&lt;...> extends CoValue&lt;...> ? ([...] extends [...] ? D[Key] extends never[] ? Item[] &amp; ... 1 more ... &amp; UnCo&lt;...> : UnCo&lt;...> extends CoValue&lt;...> ? D[Key] extends (infer ItemDepth)[] ? (CoValue&lt;...> &amp; ... 1 more ... &amp; ([...] extends [...] ? ItemDepth extends never[] ? Item[] &amp; ... 1 more ... &amp; UnCo&lt;...> : UnCo&lt;...> extends CoValue&lt;...> ? ItemDepth extends (infer ItemDepth)[] ? (CoValue&lt;...> &amp; ... 1 more ... &amp; ([...] extends [...] ? ItemDepth extends never[] ? Item[] &amp; ... 1 more ... &amp; UnCo&lt;...> : UnCo&lt;...> extends CoValue&lt;...> ? ItemDepth extends (infer ItemDepth)[] ? (CoValue&lt;...> &amp; ... 1 more ... &amp; ([...] extends [...] ? ItemDepth extends never[] ? Item[] &amp; ... 1 more ... &amp; UnCo&lt;...> : UnCo&lt;...> extends CoValue&lt;...> ? ItemDepth extends (infer ItemDepth)[] ? (CoValue&lt;...> &amp; UnCo&lt;...>)[] &amp; ... 2 more ... &amp; UnCo&lt;...> : never : Item[] &amp; ... 1 more ... &amp; UnCo&lt;...> : [...] extends [...] ? ItemDepth extends never[] ? {&#10;            ...;&#10;        } &amp; ... 1 more ... &amp; UnCo&lt;...> : ItemDepth extends (infer ItemDepth)[] ? typeof ItemsSym extends keyof UnCo&lt;...> | keyof CoValue&lt;...> ? {&#10;            ...;&#10;        } &amp; ... 2 more ... &amp; {&#10;            ...;&#10;        } : never : keyof ItemDepth extends never ? {&#10;            ...;&#10;        } &amp; ... 1 more ... &amp; UnCo&lt;...> : { [Key in keyof ItemDepth ...' >useAccount</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const useCoState: &lt;V extends CoValue&lt;string, any>, D extends DepthsIn&lt;V>>(Schema: (new (...args: any[]) => V) &amp; CoValueClass&lt;CoValue&lt;string, any>, any>, id: ID&lt;V> | undefined, depth?: D | undefined) => DeeplyLoaded&lt;...> | undefined' >useCoState</data-lsp></span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='const Jazz: JazzReactContext&lt;Account>' >Jazz</data-lsp>;</span></div><div class='line'>&nbsp;</div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function App(): React.JSX.Element' >App</data-lsp></span><span style="color: var(--shiki-color-text)">() {</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const me: Account' >me</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const logOut: () => void' >logOut</data-lsp></span><span style="color: var(--shiki-color-text)"> } </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='const useAccount: () => {&#10;    me: Account;&#10;    logOut: () => void;&#10;} (+1 overload)' >useAccount</data-lsp></span><span style="color: var(--shiki-color-text)">();</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='const createChat: () => void' >createChat</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const group: Group' >group</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(alias) class Group&#10;import Group' >Group</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Group.create&lt;Group>(this: ClassOf&lt;Group>, options: {&#10;    owner: Account;&#10;}): Group' >create</data-lsp></span><span style="color: var(--shiki-color-text)">({ <data-lsp lsp='(property) owner: Account' >owner</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='const me: Account' >me</data-lsp> });</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const group: Group' >group</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Group.addMember(member: Account | "everyone", role: Role): Group' >addMember</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">"everyone"</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"writer"</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const chat: Chat' >chat</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='class Chat' >Chat</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) CoList&lt;Item>.create&lt;Chat>(this: ClassOf&lt;Chat>, items: (Message | null)[], options: {&#10;    owner: Account | Group;&#10;}): Chat' >create</data-lsp></span><span style="color: var(--shiki-color-text)">([]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(property) owner: Account | Group' >owner</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='const group: Group' >group</data-lsp> });</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var location: Location' >location</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Location.hash: string' >hash</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">"/chat/"</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const chat: Chat' >chat</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) CoList&lt;co&lt;Message | null>>.id: ID&lt;Chat>' >id</data-lsp>;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  };</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">"flex flex-col items-center justify-between w-screen h-screen p-2 dark:bg-black dark:text-white"</span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">"rounded mb-5 px-2 py-1 text-sm self-end"</span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">      {</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const me: Account' >me</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Account.profile: Profile | null' >profile</data-lsp></span><span style="color: var(--shiki-color-text)">?.<data-lsp lsp='(property) Profile.name: co&lt;string> | undefined' >name</data-lsp>} · &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps&lt;React.ButtonHTMLAttributes&lt;HTMLButtonElement>, HTMLButtonElement>' >button</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.DOMAttributes&lt;HTMLButtonElement>.onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{<data-lsp lsp='const logOut: () => void' >logOut</data-lsp>}>Log Out&lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps&lt;React.ButtonHTMLAttributes&lt;HTMLButtonElement>, HTMLButtonElement>' >button</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    {</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) useIframeHashRouter(): {&#10;    navigate: (url: string) => void;&#10;    route: (routes: {&#10;        [route: string]: (param: string) => React.ReactNode;&#10;    }) => React.ReactNode;&#10;}&#10;import useIframeHashRouter' >useIframeHashRouter</data-lsp></span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(property) route: (routes: {&#10;    [route: string]: (param: string) => React.ReactNode;&#10;}) => React.ReactNode' >route</data-lsp></span><span style="color: var(--shiki-color-text)">({</span></div><div class='line'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&apos;/&apos;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='const createChat: () => void' >createChat</data-lsp></span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&apos;/chat/:id&apos;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) id: string' >id</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(alias) function ChatScreen(props: {&#10;    chatID: ID&lt;Chat>;&#10;}): React.JSX.Element&#10;import ChatScreen' >ChatScreen</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) chatID: ID&lt;Chat>' >chatID</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{<data-lsp lsp='(parameter) id: string' >id</data-lsp> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) type ID&lt;T> = \`co_z\${string}\` &amp; IDMarker&lt;T>&#10;import ID' >ID</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='class Chat' >Chat</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;} /&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    })}</span></div><div class='line'><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) createRoot(container: Container, options?: RootOptions | undefined): Root&#10;import createRoot' >createRoot</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.getElementById(elementId: string): HTMLElement | null' >getElementById</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">"root"</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">)</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Root.render(children: React.ReactNode): void' >render</data-lsp></span><span style="color: var(--shiki-color-text)">(&lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const Jazz: JazzReactContext&lt;Account>' >Jazz</data-lsp>.<data-lsp lsp='(property) JazzReactContext&lt;Account>.Provider: React.FC&lt;{&#10;    children: React.ReactNode;&#10;}>' >Provider</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;&lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='function App(): React.JSX.Element' >App</data-lsp></span><span style="color: var(--shiki-color-text)">/&gt;&lt;/</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const Jazz: JazzReactContext&lt;Account>' >Jazz</data-lsp>.<data-lsp lsp='(property) JazzReactContext&lt;Account>.Provider: React.FC&lt;{&#10;    children: React.ReactNode;&#10;}>' >Provider</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;);</span></div></code></div></pre>`
	}}/></div>;
}

export function ChatScreen_tsx() {
	return <div className="shiki-outer"><div className="shiki-filename">chatScreen.tsx</div><div className="not-prose" dangerouslySetInnerHTML={{__html: `<pre class="shiki css-variables twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) type ID&lt;T> = \`co_z\${string}\` &amp; IDMarker&lt;T>&#10;import ID' >ID</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;jazz-tools&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(alias) class Chat&#10;import Chat' >Chat</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) class Message&#10;import Message' >Message</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) const useCoState: &lt;V extends CoValue&lt;string, any>, D extends DepthsIn&lt;V>>(Schema: (new (...args: any[]) => V) &amp; CoValueClass&lt;CoValue&lt;string, any>, any>, id: ID&lt;V> | undefined, depth?: D | undefined) => DeeplyLoaded&lt;...> | undefined&#10;import useCoState' >useCoState</data-lsp> } </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;./app.tsx&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function ChatScreen(props: {&#10;    chatID: ID&lt;Chat>;&#10;}): React.JSX.Element' >ChatScreen</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) props: {&#10;    chatID: ID&lt;Chat>;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(property) chatID: ID&lt;Chat>' >chatID</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) type ID&lt;T> = \`co_z\${string}\` &amp; IDMarker&lt;T>&#10;import ID' >ID</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) class Chat&#10;import Chat' >Chat</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; }) {</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const chat: Chat | (Message[] &amp; Chat) | undefined' >chat</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) useCoState&lt;Chat, DepthsIn&lt;Chat>>(Schema: (new (...args: any[]) => Chat) &amp; CoValueClass&lt;CoValue&lt;string, any>, any>, id: ID&lt;Chat> | undefined, depth?: DepthsIn&lt;...> | undefined): Chat | ... 1 more ... | undefined&#10;import useCoState' >useCoState</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(alias) class Chat&#10;import Chat' >Chat</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) props: {&#10;    chatID: ID&lt;Chat>;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) chatID: ID&lt;Chat>' >chatID</data-lsp>);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='const chat: Chat | (Message[] &amp; Chat) | undefined' >chat</data-lsp> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&apos;w-full max-w-xl h-full flex flex-col items-stretch&apos;</span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    {</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const chat: Chat | (Message[] &amp; Chat)' >chat</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Array&lt;T>.length: number' >length</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></div><div class='line'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const chat: Chat | (Message[] &amp; Chat)' >chat</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Array&lt;T>.map&lt;React.JSX.Element | null>(callbackfn: (value: co&lt;Message | null>, index: number, array: co&lt;Message | null>[]) => React.JSX.Element | null, thisArg?: any): (React.JSX.Element | null)[]' >map</data-lsp></span><span style="color: var(--shiki-color-text)">((<data-lsp lsp='(parameter) msg: co&lt;Message | null>' >msg</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) msg: co&lt;Message | null>' >msg</data-lsp> </span><span style="color: var(--shiki-token-keyword)">&&</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='function ChatBubble(props: {&#10;    msg: Message;&#10;}): React.JSX.Element' >ChatBubble</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) msg: Message' >msg</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{<data-lsp lsp='(parameter) msg: Message | (Message &amp; CoMarker)' >msg</data-lsp>} </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.Attributes.key?: React.Key | null | undefined' >key</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) msg: Message | (Message &amp; CoMarker)' >msg</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) CoMap.id: ID&lt;Message> | ID&lt;Message &amp; CoMarker>' >id</data-lsp>} />)</span></div><div class='line'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&apos;m-auto text-sm&apos;</span><span style="color: var(--shiki-color-text)">&gt;(Empty chat)&lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;}</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='function ChatInput(props: {&#10;    onSubmit: (text: string) => void;&#10;}): React.JSX.Element' >ChatInput</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) onSubmit: (text: string) => void' >onSubmit</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{(<data-lsp lsp='(parameter) text: string' >text</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></div><div class='line'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const chat: Chat | (Message[] &amp; Chat)' >chat</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) CoList&lt;Item = any>.push(...items: co&lt;Message | null>[]): number (+1 overload)' >push</data-lsp></span><span style="color: var(--shiki-color-text)">(</span></div><div class='line'><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(alias) class Message&#10;import Message' >Message</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) CoMap.create&lt;Message>(this: ClassOf&lt;Message>, init: {&#10;    text: co&lt;string> &amp; (co&lt;string> | undefined);&#10;}, options: {&#10;    owner: Account | Group;&#10;}): Message' >create</data-lsp></span><span style="color: var(--shiki-color-text)">({ <data-lsp lsp='(property) text: co&lt;string> &amp; (co&lt;string> | undefined)' >text</data-lsp> }</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(property) owner: Account | Group' >owner</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const chat: Chat | (Message[] &amp; Chat)' >chat</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) CoList&lt;Item = any>._owner: Account | Group' >_owner</data-lsp> })</span></div><div class='line'><span style="color: var(--shiki-color-text)">      );</span></div><div class='line'><span style="color: var(--shiki-color-text)">    }} /&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;Loading...&lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function ChatBubble(props: {&#10;    msg: Message;&#10;}): React.JSX.Element' >ChatBubble</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) props: {&#10;    msg: Message;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> { <data-lsp lsp='(property) msg: Message' >msg</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) class Message&#10;import Message' >Message</data-lsp></span><span style="color: var(--shiki-color-text)"> }) {</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const lastEdit: CoMapEdit&lt;co&lt;string>>' >lastEdit</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) props: {&#10;    msg: Message;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) msg: Message' >msg</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) CoMap._edits: {&#10;    text: CoMapEdit&lt;co&lt;string>>;&#10;}' >_edits</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) text: CoMapEdit&lt;co&lt;string>>' >text</data-lsp>;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const align: "items-end" | "items-start"' >align</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const lastEdit: CoMapEdit&lt;co&lt;string>>' >lastEdit</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) by?: Account | undefined' >by</data-lsp></span><span style="color: var(--shiki-color-text)">?.<data-lsp lsp='(property) Account.isMe: boolean | undefined' >isMe</data-lsp> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;items-end&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;items-start&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{</span><span style="color: var(--shiki-token-string-expression)">\`</span><span style="color: var(--shiki-token-keyword)">\${</span><span style="color: var(--shiki-color-text)"><data-lsp lsp='const align: "items-end" | "items-start"' >align</data-lsp></span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)"> flex flex-col\`</span><span style="color: var(--shiki-color-text)">}&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&apos;rounded-xl bg-stone-100 dark:bg-stone-700 dark:text-white py-2 px-4 mt-2 min-w-[5rem]&apos;</span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">      { </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) props: {&#10;    msg: Message;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) msg: Message' >msg</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Message.text: co&lt;string>' >text</data-lsp> }</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&apos;text-xs text-neutral-500 ml-2&apos;</span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">      { </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const lastEdit: CoMapEdit&lt;co&lt;string>>' >lastEdit</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) by?: Account | undefined' >by</data-lsp></span><span style="color: var(--shiki-color-text)">?.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Account.profile: Profile | null | undefined' >profile</data-lsp></span><span style="color: var(--shiki-color-text)">?.<data-lsp lsp='(property) Profile.name: co&lt;string> | undefined' >name</data-lsp> }{</span><span style="color: var(--shiki-token-string-expression)">&apos; &apos;</span><span style="color: var(--shiki-color-text)">}</span></div><div class='line'><span style="color: var(--shiki-color-text)">      { </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const lastEdit: CoMapEdit&lt;co&lt;string>>' >lastEdit</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) madeAt: Date' >madeAt</data-lsp></span><span style="color: var(--shiki-token-function)">?.<data-lsp lsp='(method) Date.toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions | undefined): string (+2 overloads)' >toLocaleTimeString</data-lsp></span><span style="color: var(--shiki-color-text)">() }</span></div><div class='line'><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function ChatInput(props: {&#10;    onSubmit: (text: string) => void;&#10;}): React.JSX.Element' >ChatInput</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) props: {&#10;    onSubmit: (text: string) => void;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> { </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) onSubmit: (text: string) => void' >onSubmit</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) text: string' >text</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)"> }) {</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.input: React.DetailedHTMLProps&lt;React.InputHTMLAttributes&lt;HTMLInputElement>, HTMLInputElement>' >input</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.HTMLAttributes&lt;T>.className?: string | undefined' >className</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&apos;rounded p-2 border mt-auto dark:bg-black dark:text-white border-stone-300 dark:border-stone-700&apos;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.InputHTMLAttributes&lt;HTMLInputElement>.placeholder?: string | undefined' >placeholder</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&apos;Type a message and press Enter&apos;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) React.DOMAttributes&lt;HTMLInputElement>.onKeyDown?: React.KeyboardEventHandler&lt;HTMLInputElement> | undefined' >onKeyDown</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">{({ <data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(property) React.BaseSyntheticEvent&lt;KeyboardEvent, EventTarget &amp; HTMLInputElement, EventTarget>.currentTarget: EventTarget &amp; HTMLInputElement' >currentTarget</data-lsp>: <data-lsp lsp='(parameter) input: EventTarget &amp; HTMLInputElement' >input</data-lsp> }) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> {</span></div><div class='line'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) key: string' >key</data-lsp> </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Enter&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) input: EventTarget &amp; HTMLInputElement' >input</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) HTMLInputElement.value: string' >value</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) props: {&#10;    onSubmit: (text: string) => void;&#10;}' >props</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(property) onSubmit: (text: string) => void' >onSubmit</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) input: EventTarget &amp; HTMLInputElement' >input</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) HTMLInputElement.value: string' >value</data-lsp>);</span></div><div class='line'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) input: EventTarget &amp; HTMLInputElement' >input</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) HTMLInputElement.value: string' >value</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    }} /&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">}</span></div></code></div></pre>`
	}}/></div>;
}